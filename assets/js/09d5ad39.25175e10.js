(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{69:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return d})),t.d(n,"toc",(function(){return r})),t.d(n,"default",(function(){return p}));var a=t(3),o=t(7),i=(t(0),t(88)),l={title:"Examples"},d={unversionedId:"examples",id:"examples",isDocsHomePage:!1,title:"Examples",description:"For Yesod",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/rehearsal/examples",version:"current",frontMatter:{title:"Examples"},sidebar:"docs",previous:{title:"wai-middleware-validation",permalink:"/rehearsal/"}},r=[{value:"For Yesod",id:"for-yesod",children:[{value:"Step 1: Create a project",id:"step-1-create-a-project",children:[]},{value:"Step 2: Add an example code without validation",id:"step-2-add-an-example-code-without-validation",children:[]},{value:"Step 3: Describe the OpenAPI document",id:"step-3-describe-the-openapi-document",children:[]},{value:"Step 4: Apply the middleware",id:"step-4-apply-the-middleware",children:[]}]}],s={toc:r};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"for-yesod"},"For Yesod"),Object(i.b)("p",null,"The following is a step-by-step example of applying wai-middleware-validation when using Yesod."),Object(i.b)("h3",{id:"step-1-create-a-project"},"Step 1: Create a project"),Object(i.b)("p",null,"Create a Yesod project using ",Object(i.b)("inlineCode",{parentName:"p"},"stack"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"$ stack new petstore yesodweb/sqlite\n")),Object(i.b)("p",null,"And you will see the following files generated under a new directory ",Object(i.b)("inlineCode",{parentName:"p"},"petstore/"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"petstore\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 app\n\u2502\xa0\xa0 \u251c\u2500\u2500 DevelMain.hs\n\u2502\xa0\xa0 \u251c\u2500\u2500 devel.hs\n\u2502\xa0\xa0 \u2514\u2500\u2500 main.hs\n\u251c\u2500\u2500 config\n\u2502\xa0\xa0 \u251c\u2500\u2500 favicon.ico\n\u2502\xa0\xa0 \u251c\u2500\u2500 keter.yml\n\u2502\xa0\xa0 \u251c\u2500\u2500 models.persistentmodels\n\u2502\xa0\xa0 \u251c\u2500\u2500 robots.txt\n\u2502\xa0\xa0 \u251c\u2500\u2500 routes.yesodroutes\n\u2502\xa0\xa0 \u251c\u2500\u2500 settings.yml\n\u2502\xa0\xa0 \u2514\u2500\u2500 test-settings.yml\n\u251c\u2500\u2500 package.yaml\n\u251c\u2500\u2500 petstore.cabal\n\u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 Application.hs\n\u2502\xa0\xa0 \u251c\u2500\u2500 Foundation.hs\n\u2502\xa0\xa0 \u251c\u2500\u2500 Handler\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Comment.hs\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Common.hs\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Home.hs\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 Profile.hs\n\u2502\xa0\xa0 \u251c\u2500\u2500 Import\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 NoFoundation.hs\n\u2502\xa0\xa0 \u251c\u2500\u2500 Import.hs\n\u2502\xa0\xa0 \u251c\u2500\u2500 Model.hs\n\u2502\xa0\xa0 \u251c\u2500\u2500 Settings\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 StaticFiles.hs\n\u2502\xa0\xa0 \u2514\u2500\u2500 Settings.hs\n\u251c\u2500\u2500 stack.yaml\n...\n")),Object(i.b)("h3",{id:"step-2-add-an-example-code-without-validation"},"Step 2: Add an example code without validation"),Object(i.b)("p",null,"First, apply the following changes to the source files to implement a example API."),Object(i.b)("h4",{id:"add-the-model"},"Add the model"),Object(i.b)("p",null,"Add the model definition to ",Object(i.b)("inlineCode",{parentName:"p"},"config/models.persistentmodels")," as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},'@@ -16,3 +16,9 @@ Comment json -- Adding "json" causes ToJSON and FromJSON instances to be derived\n     userId UserId Maybe\n     deriving Eq\n     deriving Show\n+\n+Pet json\n+    kind Text\n+    age Int\n+    deriving Eq\n+    deriving Show\n')),Object(i.b)("h4",{id:"add-the-route"},"Add the route"),Object(i.b)("p",null,"Add the route definition to ",Object(i.b)("inlineCode",{parentName:"p"},"config/routes.yesodroutes")," as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},"@@ -12,3 +12,5 @@\n /comments CommentR POST\n \n /profile ProfileR GET\n+\n+/pets PetsR GET POST\n")),Object(i.b)("h4",{id:"add-the-handlers"},"Add the handlers"),Object(i.b)("p",null,"Create ",Object(i.b)("inlineCode",{parentName:"p"},"src/Handler/Pet.hs")," with the following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},"module Handler.Pet where\n\nimport           Import\n\n\ngetPetsR :: Handler Value\ngetPetsR = do\n    pets <- runDB $ selectList [] [Asc PetId]\n    returnJson pets\n\npostPetsR :: Handler Value\npostPetsR = do\n    pet <- requireCheckJsonBody :: Handler Pet\n    pet' <- runDB $ insertEntity pet\n    returnJson pet'\n")),Object(i.b)("p",null,"Add the following line to ",Object(i.b)("inlineCode",{parentName:"p"},"src/Application.hs"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},"@@ -44,6 +44,7 @@ import Handler.Common\n import Handler.Home\n import Handler.Comment\n import Handler.Profile\n+import Handler.Pet\n \n -- This line actually creates our YesodDispatch instance. It is the second half\n -- of the call to mkYesodData which occurs in Foundation.hs. Please see the\n\n")),Object(i.b)("p",null,"Add the following line to ",Object(i.b)("inlineCode",{parentName:"p"},"src/Foundation.hs"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},"@@ -166,6 +166,7 @@ instance Yesod App where\n     isAuthorized FaviconR _ = return Authorized\n     isAuthorized RobotsR _ = return Authorized\n     isAuthorized (StaticR _) _ = return Authorized\n+    isAuthorized PetsR _ = return Authorized\n \n     -- the profile route requires that the user is authenticated, so we\n     -- delegate to that function\n")),Object(i.b)("h4",{id:"make-sure-it-works"},"Make sure it works"),Object(i.b)("p",null,"Run the devel server."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"$ stack exec -- yesod devel\n")),Object(i.b)("p",null,"From another terminal, post the test data with the following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"{2}","{2}":!0},'$ curl http://localhost:3000/pets -X POST -H "Content-Type: application/json" -d \'{"kind":"dog","age":3}\'\n{"kind":"dog","age":3,"id":1}\n')),Object(i.b)("p",null,"Then, confirm that the data has been stored with the following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"{2}","{2}":!0},'$ curl -s http://localhost:3000/pets\n[{"kind":"dog","age":3,"id":1}]\n')),Object(i.b)("h3",{id:"step-3-describe-the-openapi-document"},"Step 3: Describe the OpenAPI document"),Object(i.b)("p",null,"Next, describe the specification of this endpoint as an OpenAPI document. Save the following as ",Object(i.b)("inlineCode",{parentName:"p"},"config/openapi.json"),"."),Object(i.b)("p",null,"We only deal with dogs and cats in our store."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json",metastring:"{58-61}","{58-61}":!0},'{\n    "openapi": "3.0.0",\n    "info": {\n        "title": "Pet Store API",\n        "version": "1.0.0"\n    },\n    "paths": {\n        "/pets": {\n            "get": {\n                "responses": {\n                    "200": {\n                        "description": "pet list",\n                        "content": {\n                            "application/json": {\n                                "schema": {\n                                    "type": "array",\n                                    "items": {\n                                        "$ref": "#/components/schemas/Pet"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            "post": {\n                "requestBody": {\n                    "content": {\n                        "application/json": {\n                            "schema": {\n                                "$ref": "#/components/schemas/Pet"\n                            }\n                        }\n                    }\n                },\n                "responses": {\n                    "default": {\n                        "description": "new pet"\n                    }\n                }\n            }\n        }\n    },\n    "components": {\n        "schemas": {\n            "Pet": {\n                "type": "object",\n                "required": [\n                    "kind",\n                    "age"\n                ],\n                "properties": {\n                    "id": {\n                        "type": "integer"\n                    },\n                    "kind": {\n                        "type": "string",\n                        "enum": [\n                            "dog",\n                            "cat"\n                        ]\n                    },\n                    "age": {\n                        "type": "integer"\n                    }\n                }\n            }\n        }\n    }\n}\n')),Object(i.b)("h3",{id:"step-4-apply-the-middleware"},"Step 4: Apply the middleware"),Object(i.b)("h4",{id:"add-the-package-dependency"},"Add the package dependency"),Object(i.b)("p",null,"Add ",Object(i.b)("inlineCode",{parentName:"p"},"wai-middleware-validation")," to ",Object(i.b)("inlineCode",{parentName:"p"},"dependencies")," in ",Object(i.b)("inlineCode",{parentName:"p"},"package.yaml"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"@@ -42,6 +42,7 @@ dependencies:\n - case-insensitive\n - wai\n - foreign-store\n+- wai-middleware-validation\n \n # The library contains all of our application code. The executable\n # defined below is just a thin wrapper.\n")),Object(i.b)("p",null,"You will probably need to add lines like the following to ",Object(i.b)("inlineCode",{parentName:"p"},"extra-deps")," in ",Object(i.b)("inlineCode",{parentName:"p"},"stack.yaml"),". Change the package version and hash value to appropriate values according to the build output."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"@@ -41,6 +41,9 @@ packages:\n #   commit: e7b331f14bcffb8367cd58fbfc8b40ec7642100a\n #\n # extra-deps: []\n+extra-deps:\n+- wai-middleware-validation-0.1.0.0@sha256:39d458e8d15f017d0653e4557864d1cf672c2fb46f1d4cae09fffbb8ebc1ddc2,2299\n+- openapi3-3.1.0@sha256:dd666c03bda1aeb1c50724385d0c79dd2c50b827413552fd522f7314e7081bc4,4652\n \n # Override default flag values for local packages and extra-deps\n # flags: {}\n\n")),Object(i.b)("h4",{id:"apply-the-middleware"},"Apply the middleware"),Object(i.b)("p",null,"And finally, add the code to apply the middleware. Change ",Object(i.b)("inlineCode",{parentName:"p"},"src/Application.hs")," as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-diff"},'@@ -37,6 +37,8 @@ import Network.Wai.Middleware.RequestLogger (Destination (Logger),\n                                              mkRequestLogger, outputFormat)\n import System.Log.FastLogger                (defaultBufSize, newStdoutLoggerSet,\n                                              toLogStr)\n+import Network.Wai.Middleware.Validation    (mkValidator\')\n+import qualified Data.ByteString.Lazy as L\n \n -- Import all relevant handler modules here.\n -- Don\'t forget to add new modules to your cabal file!\n@@ -95,7 +97,10 @@ makeApplication foundation = do\n     logWare <- makeLogWare foundation\n     -- Create the WAI application and apply middlewares\n     appPlain <- toWaiAppPlain foundation\n-    return $ logWare $ defaultMiddlewaresNoLogging appPlain\n+    apiJson <- L.readFile "config/openapi.json"\n+    let validator = fromMaybe (error "Invalid OpenAPI document") (mkValidator\' apiJson)\n+        app = validator appPlain\n+    return $ logWare $ defaultMiddlewaresNoLogging app\n \n makeLogWare :: App -> IO Middleware\n makeLogWare foundation =\n')),Object(i.b)("h4",{id:"try"},"Try!"),Object(i.b)("p",null,"Run the devel server again."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"$ stack exec -- yesod devel\n")),Object(i.b)("p",null,"From another terminal, try the following command. Make sure you can add a cat."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"{2,5}","{2,5}":!0},'$ curl http://localhost:3000/pets -X POST -H "Content-Type: application/json" -d \'{"kind":"cat","age":2}\'\n{"kind":"cat","age":2,"id":2}\n\n$ curl -s http://localhost:3000/pets\n[{"kind":"dog","age":3,"id":1},{"kind":"cat","age":2,"id":2}]\n')),Object(i.b)("p",null,"Then, try adding a tiger. We can't deal tigers in our store!"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell",metastring:"{2}","{2}":!0},'$ curl http://localhost:3000/pets -X POST -H "Content-Type: application/json" -d \'{"kind":"tiger","age":10}\'\n{"title":"Validation failed","detail":"expected one of \\"[\\\\\\"dog\\\\\\",\\\\\\"cat\\\\\\"]\\" but got String \\"tiger\\"\\n"}\n')),Object(i.b)("p",null,"As you can see, using ",Object(i.b)("strong",{parentName:"p"},"wai-middleware-validation"),", you can implement validation without writing any code in the handler."))}p.isMDXComponent=!0}}]);