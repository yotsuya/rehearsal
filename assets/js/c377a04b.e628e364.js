(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{77:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return r})),t.d(a,"metadata",(function(){return d})),t.d(a,"toc",(function(){return l})),t.d(a,"default",(function(){return p}));var n=t(3),i=t(7),o=(t(0),t(89)),r={title:"wai-middleware-validation",slug:"/"},d={unversionedId:"index",id:"index",isDocsHomePage:!1,title:"wai-middleware-validation",description:"wai-middleware-validation is a WAI Middleware that automates the validation of request and response bodies. It validates JSON format bodies according to the schema defined in the OpenAPI document.",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/rehearsal/",version:"current",frontMatter:{title:"wai-middleware-validation",slug:"/"},sidebar:"docs",next:{title:"Getting Started",permalink:"/rehearsal/getting-started"}},l=[{value:"Usage",id:"usage",children:[]},{value:"LICENCE",id:"licence",children:[]}],s={toc:l};function p(e){var a=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,t,{components:a,mdxType:"MDXLayout"}),Object(o.b)("p",null,"wai-middleware-validation is a WAI Middleware that automates the validation of request and response bodies. It validates JSON format bodies according to the schema defined in the OpenAPI document."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"The following is an example of applying it to a Yesod application."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},'Define the request and response specifications as an OpenAPI document file in JSON format and place it in an arbitrary path. (In this case, we will use "config/openapi.json".)'),Object(o.b)("li",{parentName:"ol"},"Make the following modifications to ",Object(o.b)("inlineCode",{parentName:"li"},"Application.hs"),".")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-diff"},'--- a/src/Application.hs\n+++ b/src/Application.hs\n@@ -37,6 +37,8 @@ import Network.Wai.Middleware.RequestLogger (Destination (Logger),\n                                              mkRequestLogger, outputFormat)\n import System.Log.FastLogger                (defaultBufSize, newStdoutLoggerSet,\n                                              toLogStr)\n+import Network.Wai.Middleware.Validation    (mkValidator\')\n+import qualified Data.ByteString.Lazy as L\n\n -- Import all relevant handler modules here.\n -- Don\'t forget to add new modules to your cabal file!\n@@ -94,7 +97,10 @@ makeApplication foundation = do\n     logWare <- makeLogWare foundation\n     -- Create the WAI application and apply middlewares\n     appPlain <- toWaiAppPlain foundation\n-    return $ logWare $ defaultMiddlewaresNoLogging appPlain\n+    apiJson <- L.readFile "config/openapi.json"\n+    let validator = fromMaybe (error "Invalid OpenAPI document") (mkValidator\' apiJson)\n+        app = validator appPlain\n+    return $ logWare $ defaultMiddlewaresNoLogging app\n\n makeLogWare :: App -> IO Middleware\n makeLogWare foundation =\n')),Object(o.b)("h2",{id:"licence"},"LICENCE"),Object(o.b)("p",null,"Copyright (c) IIJ Innovation Institute Inc."),Object(o.b)("p",null,"Licensed under The 3-Clause BSD License."))}p.isMDXComponent=!0}}]);